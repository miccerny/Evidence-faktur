package cz.itnetwork.service;

import cz.itnetwork.dto.PersonDTO;
import cz.itnetwork.dto.PersonStatisticDTO;
import cz.itnetwork.dto.mapper.PersonMapper;
import cz.itnetwork.entity.PersonEntity;
import cz.itnetwork.entity.UserEntity;
import cz.itnetwork.entity.repository.PersonRepository;
import cz.itnetwork.entity.repository.UserRepository;
import jakarta.persistence.Tuple;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import org.webjars.NotFoundException;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Implementace slu≈æby pro pr√°ci s entitou Person.
 * *
 * Obsahuje logiku pro p≈ôid√°v√°n√≠, aktualizaci, odstranƒõn√≠
 * a z√≠sk√°v√°n√≠ informac√≠ o osob√°ch.
 */
@Service
public class PersonServiceImpl implements PersonService {

    @Autowired
    private PersonMapper personMapper;

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * P≈ôid√° novou osobu do syst√©mu.
     * *
     *  Nejprve p≈ôevede vstupn√≠ DTO na entitu, kterou ulo≈æ√≠ do datab√°ze.
     *  V√Ωsledek n√°slednƒõ p≈ôevede zpƒõt na DTO a vr√°t√≠.
     *
     * @param personDTO - objekt s √∫daji o osobƒõ
     * @return - ulo≈æen√° osoba ve formƒõ DTO
     */
    @Override
    public PersonDTO addPerson(PersonDTO personDTO) {
        if(personRepository.existsByIdentificationNumber(personDTO.getIdentificationNumber())){
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Firma s t√≠mto IƒåO ji≈æ existuje");
        }

        if (personDTO.getIdentificationNumber() == null || personDTO.getIdentificationNumber().isBlank()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "IƒåO nesm√≠ b√Ωt pr√°zdn√©");
        }
        PersonEntity entity = personMapper.toEntity(personDTO);
        entity = personRepository.save(entity);

        return personMapper.toDTO(entity);
    }

    /**
     * Skryje osobu se zadan√Ωm ID (soft delete).
     * *
     *  Vyhled√° osobu podle ID a nastav√≠ p≈ô√≠znak `hidden` na true,
     *  ƒç√≠m≈æ se oznaƒç√≠ jako skryt√° m√≠sto fyzick√©ho smaz√°n√≠ z datab√°ze.
     *  Pokud osoba neexistuje, metoda chybu ignoruje.
     *
     * @param personId - ID osoby, kter√° m√° b√Ωt skryta
     */
    @Override
    public void removePerson(long personId) {
        try {
            PersonEntity person = fetchPersonById(personId);
            person.setHidden(true);

            personRepository.save(person);
        } catch (NotFoundException ignored){

        }
    }

    /**
     * Vr√°t√≠ str√°nkovan√Ω seznam v≈°ech nezakryt√Ωch (aktivn√≠ch) osob.
     * *
     * Naƒç√≠t√° pouze z√°znamy, kter√© nejsou oznaƒçeny jako skryt√© (`hidden = false`),
     * a p≈ôev√°d√≠ je na DTO objekty.
     *
     * @param pageable - informace o str√°nkov√°n√≠ (ƒç√≠slo str√°nky, velikost, ≈ôazen√≠)
     * @return - str√°nka s DTO objekty osob
     */
    @Override
    public Page<PersonDTO> getAll(Pageable pageable) {

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        System.out.println("Authentication: " + authentication);
        System.out.println("Principal class: " + authentication.getPrincipal().getClass());
        System.out.println("Principal: " + authentication.getPrincipal());
        // üîì Nep≈ôihl√°≈°en√Ω u≈æivatel ‚Üí vr√°t√≠me v≈°echny ve≈ôejn√© firmy
        if (authentication == null || !authentication.isAuthenticated() ||
                authentication.getPrincipal().equals("anonymousUser")) {
            return personRepository.findByHidden(false, pageable)
                    .map(personMapper::toDTO);
        }

        UserEntity userEntity = (UserEntity) authentication.getPrincipal();

        return personRepository.findByOwner(userEntity, pageable)
                .map(personMapper::toDTO);
    }

    /**
     * Vr√°t√≠ detail osoby podle jej√≠ho ID.
     * *
     * Naƒçte entitu osoby pomoc√≠ zadan√©ho ID a p≈ôevede ji na DTO.
     * Pokud osoba neexistuje, metoda vyvol√° v√Ωjimku.
     *
     * @param personId -  ID hledan√© osoby
     * @return -  DTO s √∫daji o osobƒõ
     * @throws NotFoundException - pokud osoba s dan√Ωm ID neexistuje
     */
    @Override
    public PersonDTO getPerson(Long personId) {
        PersonEntity entity = fetchPersonById(personId);
        return personMapper.toDTO(entity);
    }

    /**
     * Aktualizuje osobu podle ID.
     * *
     * Nejprve oznaƒç√≠ p≈Øvodn√≠ z√°znam jako skryt√Ω (hidden = true),
     * ƒç√≠m≈æ zachov√° historii dat. Pot√© vytvo≈ô√≠ novou entitu na z√°kladƒõ
     * poskytnut√©ho DTO (s nov√Ωm ID) a ulo≈æ√≠ ji jako nov√Ω z√°znam.
     *
     * @param personId - ID osoby, kter√° se m√° aktualizovat
     * @param personDTO - nov√© √∫daje osoby
     * @return - DTO novƒõ ulo≈æen√© osoby
     */
    @Override
    public PersonDTO updatePerson(Long personId, PersonDTO personDTO){
        PersonEntity entity = fetchPersonById(personId);
        entity.setHidden(true);
        personRepository.save(entity);
        personDTO.setId(null);
        entity = personMapper.toEntity(personDTO);
        PersonEntity saved = personRepository.save(entity);

        return personMapper.toDTO(saved);
    }

    /**
     * Vrac√≠ statistiky tr≈æeb jednotliv√Ωch osob.
     * *
     * Z√≠sk√° agregovan√° data (nap≈ô. souƒçet tr≈æeb) z datab√°ze pomoc√≠ dotazu v repository
     * a p≈ôevede je do seznamu DTO objekt≈Ø pro dal≈°√≠ zpracov√°n√≠ nebo zobrazen√≠.
     *
     * @return -  seznam statistik osob s ID, jm√©nem a celkov√Ωmi tr≈æbami
     */
    @Override
    public List<PersonStatisticDTO> getPersonStatistic(){
        List<Tuple> tuples;
        tuples = personRepository.getPersonSumPrice();

        return tuples.stream()
                .map(tuple -> new PersonStatisticDTO(
                        tuple.get("personId", Long.class),
                        tuple.get("personName", String.class),
                        tuple.get("revenue", BigDecimal.class)
                ))
                .collect(Collectors.toList());
    }

    /**
     * Vyhled√° osobu podle ID.
     * *
     * Pokud osoba s dan√Ωm ID neexistuje, vyvol√° v√Ωjimku {@link NotFoundException}.
     * Slou≈æ√≠ jako pomocn√° metoda pro centralizaci naƒç√≠t√°n√≠ osob z datab√°ze.
     *
     * @param id ID hledan√© osoby
     * @return entita osoby
     * @throws NotFoundException pokud osoba nebyla nalezena
     */
    private PersonEntity fetchPersonById(long id) {
        return personRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Person with id " + id + " wasn't found in the database."));
    }
}
